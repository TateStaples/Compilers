(* merge_declarations(declaration, declaration_list)*)


structure A = Absyn

fun add_or_combine_declaration (A.FunctionDec(a1::l1), A.FunctionDec(l2)::declaration_list) = A.FunctionDec(a1::l2)::declaration_list
 | add_or_combine_declaration (A.TypeDec(a1::l1), A.TypeDec(l2)::declaration_list) = A.TypeDec(a1::l2)::declaration_list
 | add_or_combine_declaration (declaration, declaration_list) = declaration::declaration_list 



%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp
| program of A. exp
| lvalue
| arithmetic
| exp_list
| exp_seq
| field_list
| declaration_list
| declaration
| type_declaration
| type
| type_fields
| type_field
| var_declaration
| fun_declaration

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%left THEN DO ELSE OF (*
if at top, then IF exp THEN exp + exp -> IF exp THEN (exp + exp)
if at bottom, then IF exp THEN exp + exp -> (IF exp THEN exp) + exp 
*)
%left ASSIGN
%left LT LE GT GE
%left OR
%left AND
%nonassoc EQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE

(* %value ID ("bogus")
%value INT (1)
%value STRING ("") *)

%%

(* Spec found from: https://www.cs.columbia.edu/~sedwards/classes/2002/w4115/tiger.pdf *)

(* program <- expression *)
program	: exp				                                    (exp)
(* SeqExp of (exp * pos) list *)
(* expression <- rule *)
exp:  STRING                                                    (A.StringExp(STRING, STRINGleft))  
    | INT                                                       (A.IntExp(INT, INTleft)) 
    | ID                                                        (A.SimpleVar(Symbol.symbol(ID), IDleft))
    | NIL                                                       (A.NilExp)
    | lvalue                                                    (A.VarExp(lvalue))
    | MINUS exp                                                 (A.OpExp{left=IntExp(0), oper=Minus, right=exp, pos=MINUSleft})
    | arithmetic                                                (arithmetic)
    | lvalue ASSIGN exp                                         (A.AssignExp{lvalue=lvalue, exp=exp, pos=ASSIGNleft})
    | ID ASSIGN exp                                             (A.AssignExp{lvalue=A.SimpleVar(Symbol.symbol(ID), IDleft), exp=exp, pos=IDleft})
    | ID LPAREN exp_list RPAREN                                 (A.CallExp{func=Symbol.symbol(ID), args=exp_list, pos=IDleft})
    | ID LPAREN RPAREN                                          (A.CallExp{func=Symbol.symbol(ID), args=[], pos=IDleft})
    | LPAREN exp_seq RPAREN                                     (A.SeqExp(exp_seq))
    | LPAREN RPAREN                                             (A.SeqExp([]))
    | ID LBRACE field_list RBRACE                               (A.RecordExp{fields=field_list, typ=Symbol.symbol(ID), pos=IDleft})
    | ID LBRACE RBRACE                                          (A.RecordExp{fields=[], typ=Symbol.symbol(ID), pos=IDleft})
    | ID LBRACK exp RBRACK OF exp                               (A.ArrayExp{typ=Symbol.symbol(ID), size=exp, init=exp, pos=IDleft})
    | IF exp THEN exp ELSE exp                                  (A.IfExp{test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
    | IF exp THEN exp                                           (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
    | WHILE exp DO exp                                          (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})
    | FOR ID ASSIGN exp TO exp DO exp                           (A.ForExp{var=Symbol.symbol(ID), escape=ref false, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
    | BREAK                                                     (A.BreakExp(BREAKleft))
    | LET declaration_list IN exp_seq END                       (A.LetExp{decs=declaration_list, body=exp_seq, pos=LETleft})
    | LET declaration_list IN END                               (A.LetExp{decs=declaration_list, body=[], pos=LETleft})
exp_seq: exp SEMICOLON exp_seq                                  ((exp, expleft)::exp_seq)
    | exp                                                       ([(exp, expleft)])
exp_list: exp COMMA exp_list                                    (exp::exp_list)
    | exp                                                       ([exp])
field_list: ID EQ exp                                           ([(A.Symbol.symbol(ID), exp, IDleft)])
    | field_list COMMA ID EQ exp                                (field_list :: (A.Symbol.symbol(ID), exp, IDleft))
lvalue: lvalue DOT ID                                             (A.FieldVar(lvalue, Symbol.symbol(ID), IDleft))
    (* | ID LBRACK exp RBRACK                                      (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID), IDleft), exp, LBRACKleft)) *)
    | lvalue LBRACK exp RBRACK                                  (A.SubscriptVar(lvalue, exp, LBRACKleft))
declaration_list: declaration declaration_list                  (merge_declarations(declaration, declaration_list)) 
    | declaration                                               ([declaration])
declaration: type_declaration                                   (type_declaration)
    | var_declaration                                           (var_declaration)
    | fun_declaration                                           (fun_declaration)
type_declaration: TYPE ID EQ type SEMICOLON                     (A.TypeDec([{typ=Symbol.symbol(ID), ty=type, pos=IDleft}]))
type: ID                                                        (A.NameTy(Symbol.symbol(ID), IDleft))
    | LBRACE type_fields RBRACE                                 (A.RecordTy(type_fields))
    | LBRACE RBRACE                                             (A.RecordTy([]))
    | ARRAY OF ID                                               (A.ArrayTy(Symbol.symbol(ID), IDleft))
type_fields: type_field                                         ([type_field])
    | type_field COMMA type_fields                              (type_field :: type_fields)
type_field: ID COLON ID                                         ({name=Symbol.symbol(ID1), typ=Symbol.symbol(ID2), escape=ref false, pos=IDleft})
var_declaration: VAR ID COLON ID ASSIGN exp                     (A.VarDec{name=Symbol.symbol(ID1), typ=SOME((Symbol.symbol(ID2), IDleft)), init=exp, escape=ref false, pos=VARleft})
    | VAR ID ASSIGN exp                                         (A.VarDec{name=Symbol.symbol(ID), typ=NONE, init=exp, escape=ref false, pos=IDleft})
fun_declaration: FUNCTION ID LPAREN type_fields RPAREN EQ exp   (A.FunctionDec([{name=Symbol.symbol(ID), params=type_fields, result=NONE, body=exp, pos=FUNCTIONleft}]))
    | FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ exp(A.FunctionDec([{name=Symbol.symbol(ID), params=type_fields, result=SOME(Symbol.symbol(ID), IDleft), body=exp, pos=FUNCTIONleft}]))
    | FUNCTION ID LPAREN RPAREN EQ exp                          (A.FunctionDec([{name=Symbol.symbol(ID), params=[], result=NONE, body=exp, pos=FUNCTIONleft}]))
    | FUNCTION ID LPAREN RPAREN COLON ID EQ exp                 (A.FunctionDec[{name=Symbol.symbol(ID1), params=[], result=SOME(Symbol.symbol(ID2), IDleft), body=exp, pos=FUNCTIONleft}])
arithmetic: exp PLUS exp                                        (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
    | exp MINUS exp                                             (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
    | exp TIMES exp                                             (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
    | exp DIVIDE exp                                            (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})
    | exp EQ exp                                                (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})       
    | exp NEQ exp                                               (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})       
    | exp LT exp                                                (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})       
    | exp LE exp                                                (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})       
    | exp GT exp                                                (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})       
    | exp GE exp                                                (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})       
    | exp AND exp                                               (A.OpExp{left=exp1, oper=A.AndOp, right=exp2, pos=ANDleft})       
    | exp OR exp                                                (A.OpExp{left=exp1, oper=A.OrOp, right=exp2, pos=ORleft})      